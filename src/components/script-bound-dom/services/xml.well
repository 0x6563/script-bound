import * as MC_ from "./node_modules/moderate-code-interpreter/src/grammar.well";
import * as JSON_ from json;

lexer {
	start: "root"

	[root]
		- import commentStart
		- when r:{</} goto footTag
		- when r:{<} goto headTag
		- when r:{[^<]+} tag "text"

	[headTag]
		- when r:{script(?![a-z_A-Z\d\-:!])} highlight "tag" set scriptHeadTag
		- when r:{style(?![a-z_A-Z\d\-:!])} tag "word" highlight "tag" set styleHeadTag
		- when r:{output(?![a-z_A-Z\d\-:!])} tag "word" highlight "tag" set outputHeadTag
		- when r:{[a-z_A-Z:!][a-z_A-Z\d\-:!]*} tag "word" highlight "tag" set stdHeadTag

	[footTag]
		- when r:{\s+} tag "space"
		- when r:{[a-z_A-Z:!][a-z_A-Z\d\-:!]*} tag "word" highlight "tag"
		- when ">" pop

	[attributes]
		- when "/>" pop
		- when r:{[a-z_A-Z:!][a-z_A-Z\d\-:!]*} tag "word" highlight "attribute.name"
		- when "="
		- when "(" goto MC_root
		- import json

	[stdHeadTag]
		- import attributes
		- when ">" pop

	[scriptHeadTag]
		- import attributes
		- when ">" set scriptBody

	[scriptBody]
		- before "</script>" pop
		- import MC_root

	[styleHeadTag]
		- import attributes
		- when ">" embed "text/css" set styleBody

	[styleBody]
        unmatched: tag "text";
		- before "</style>" unembed pop

	[outputHeadTag]
		- before r:{content\s*=\s*"html"} set outputHeadHTMLTag
		- before r:{content\s*=\s*"json"} set outputHeadJSONTag
		- before r:{content\s*=\s*"xml"} set outputHeadXMLTag
		- before r:{content\s*=\s*"script"} set outputHeadScriptTag
		- import attributes
		- when ">" set outputBody

	[outputHeadScriptTag]
		- import attributes
		- when ">" set outputScriptBody

	[outputScriptBody]
		- before "</output>" pop
		- import MC_root

	[outputHeadHTMLTag]
		- import attributes
		- when ">" embed "text/html" set outputEmbedBody

	[outputHeadXMLTag]
		- import attributes
		- when ">" embed "text/xml" set outputEmbedBody

	[outputHeadJSONTag]
		- import attributes
		- when ">" set outputHeadJSONBody

	[outputHeadJSONBody]
		- before "</output>" pop
		- import json

	[outputBody]
        unmatched: tag "text";
		- before "</output>" pop

	[outputEmbedBody]
        unmatched: tag "text";
		- before "</output>" unembed pop

	[commentStart]
		- when "<!--" tag "commentStart" goto commentEnd

	[commentEnd]
        unmatched: tag "text";
		- when "-->" tag "commentEnd" pop

	[json]
		- when r:{\s+} tag "space"
		- when r:{-?(?:[0-9]|[1-9][0-9]+)(?:\.[0-9]+)?(?:[eE][-+]?[0-9]+)?\b} tag "number" highlight "number"
		- when r:{"} tag "dquote" highlight "attribute.value" goto json_string
		- when "{" inset
		- when "}" pop
		- when "[" inset
		- when "]" pop
		- when ","
		- when ":"
		- when "true" highlight "keyword"
		- when "false" highlight "keyword"
		- when "null" highlight "keyword"

	[json_string]
		- when r:{\\[\\\/bnrft]} tag "escaped" highlight "constant"
		- when r:{\\"} tag "quoteEscape"
		- when r:{\\u[A-Fa-f\d]{4}} tag "escaped" highlight "constant"
		- when r:{\\.} tag "badEscape"
		- when r:{[^"\\]+} tag "string" highlight "attribute.value"
		- when r:{"} tag "dquote" highlight "attribute.value" pop

}

grammar {
	start: "XMLPlus"

	[XMLPlus]
		| Node => ( { nodes: $0 ?[$0]:[] } )
		| XMLPlus _ Node => ( { nodes: $2 ? $0.nodes.concat($2): $0.nodes } )

	[Node] => ( $0 )
		| Element
		| Script
		| <text> => ( { text: $0.value } )
		| "<!--" <text> "-->" => ( null )

	[Element]
		| "<" ElementHead _ ">" _ XMLPlus _ "</" <word> ">" => ( { tag: $1.tag, attributes: $1.attributes , nodes: $5.nodes} )
		| "<" ElementHead _ "/>" => ( { tag: $1.tag, attributes: $1.attributes, nodes:[] } )
		| "<" ElementHead _ ">" _ "</" <word> ">" => ( { tag: $1.tag, attributes: $1.attributes , nodes: [] } )

	[ElementHead]
		| <word> __ XMLPlusAttributes => ( { tag: $0.value, attributes: $2 } )
		| <word> => ( { tag: $0.value, attributes: [] } )

	[Script]
		| "<" ScriptHead _ ">" _ MC_Body _ "</" "script" ">" => ( { tag: $1.tag, attributes: $1.attributes , nodes: [$5]} )
		| "<" ScriptHead _ "/>" => ( { tag: $1.tag, attributes: $1.attributes, nodes:[] } )
		| "<" ScriptHead _ ">" _ "</" "script" ">" => ( { tag: $1.tag, attributes: $1.attributes , nodes: [] } )

	[ScriptHead]
		| "script" => ( { tag: $0.value, attributes: [] } )
		| "script" __ XMLPlusAttributes => ( { tag: $0.value, attributes: $2 } )

	[XMLPlusAttributes]
		| XMLPlusAttr => ( { [$0.key] : $0 } )
		| XMLPlusAttributes _ XMLPlusAttr => ( { ...$0, [$2.key]: $2  } )

	[XMLPlusAttr]
		| <word> "=" JSON => ( { key: $0.value, value: $2, type: 'json' } )
		| <word> => ( { key: $0.value , value: '', type: 'json' } )
		| <word> "=" "(" _ MC_Body _ ")" => ( { key:$0.value , value: $4, type: 'script' } )

	[JSON] => ( $0 )
		| Object
		| Array
		| String
		| Number
		| "true" => ( true )
		| "false" => ( false )
		| "null" => ( null )

	[String]
		| <dquote> <dquote> => ( "" )
		| <dquote> StringInner <dquote> => ( $1 )

	[StringInner]
		| StringEscape => ( $0 )
		| <string> => ( $0.value )
		| StringInner StringEscape => ( $0 + $1 )
		| StringInner <string> => ( $0 + $1.value )

	[StringEscape]
		| <escaped> => ( JSON.parse('"' +$0.value + '"') )
		| <quoteEscape> => ( $0.value[1] )

	[Object]
		| "{" _ "}" => ( {} )
		| "{" _ JSONAttributes _ "}" => ( $2 )

	[Array]
		| "[" _ "]" => ( [] )
		| "[" _ JSON_list _ "]" => ( $2 )

	[JSON_list]
		| JSON => ( [ $0 ] )
		| JSON_list _ "," _ JSON => ( $0.concat($4) )

	[JSONAttributes]
		| JSONKV => ( $0 )
		| JSONAttributes _ "," _ JSONKV => ( { ...$0, ...$4 } )

	[JSONKV]
		| String@k _ ":" _ JSON@v => ( { [$k]: $v } )

	[Number]
		| <number> => ( Number($0.value) )

	[_]
		| <space>?

	[__]
		| <space>

}
